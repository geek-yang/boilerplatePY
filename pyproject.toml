[build-system]
requires = ["hatchling>=1.8.0", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "boilerplatepy/__init__.py"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github", "/.mypy_cache", "/.pytest_cache", "/.githooks",
  "sonar-project.properties"
]

[tool.hatch.build.targets.wheel]
packages = ["boilerplatepy"]

[tool.hatch.publish.index]
disable = true  # Requires confirmation when publishing to pypi.

[project]
name = "boilerplatepy"
description = "python package for demo."
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.9, <3.12"
authors = [
  {email = "liuyang.bach@outlook.com"},
  {name = "Yang Liu"}
]
maintainers = [
  {name = "Yang Liu", email = "liuyang.bach@outlook.com"},
]
keywords = [
  "demo",
]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
dependencies = [
  "numpy",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "bump2version",
    "hatch",
    "ruff",
    "black",
    "isort",
    "mypy",
    "pytest",
    "pytest-cov",
]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocs-jupyter",
    "mkdocstrings[python]",
    "mkdocs-gen-files",
]

[project.urls]
Documentation = "https://boilerplatepy.readthedocs.io/"
Homepage = "https://github.com/geek-yang/boilerplatePY"

[tool.hatch.envs.default]
features = ["dev"]

[tool.hatch.envs.default.scripts]
lint = [
  "ruff check boilerplatepy/ tests/",
  "mypy boilerplatepy/",
  "black --check --diff boilerplatepy/ tests/",
]

format = [
  "black boilerplatepy/ tests/",
  "ruff check boilerplatepy/ tests/ --fix --exit-non-zero-on-fix",
  "lint",
]

test = ["pytest ./boilerplatepy/ ./tests/ --doctest-modules --doctest-ignore-import-errors",]
coverage = [
  "pytest --cov --cov-report term --cov-report xml --junitxml=xunit-result.xml tests/",
]

[tool.hatch.envs.docs]
features = ["docs"]

[tool.hatch.envs.docs.scripts]
build = ["mkdocs build"]
serve = ["mkdocs serve"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = true
python_version = "3.9"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'

[tool.ruff]
select = [
  "E",  # pycodestyle
  "F",  # pyflakes
  "B",  # flake8-bugbear
  "D",  # pydocstyle
  "C90",  # mccabe complexity
  "I",  # isort
  "N",  # PEP8-naming
  "UP",  # pyupgrade (upgrade syntax to current syntax)
  "PLE",  # Pylint error https://github.com/charliermarsh/ruff#error-ple
  "PLR",  # Pylint refactor (e.g. too-many-arguments)
  "PLW",  # Pylint warning (useless-else-on-loop)
]
extend-select = [
  "D401",  # First line should be in imperative mood
  "D400",  # First line should end in a period.
  "D404",  # First word of the docstring should not be 'This'
  "TID252",  # No relative imports (not pep8 compliant)
]
ignore = [
  "PLR2004",  # magic value used in comparsion (i.e. `if ndays == 28: month_is_feb`).
  "PLR0913",  # too many arguments
]
line-length = 88
exclude = ["docs", "build"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py39"

[tool.ruff.per-file-ignores]
"tests/**" = ["D"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["boilerplatepy"]
force-single-line = true
lines-after-imports = 2
no-lines-before = ["future","standard-library","third-party","first-party","local-folder"]

[tool.coverage.run]
branch = true
source = ["boilerplatepy"]
command_line = "-m pytest"

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:"
]
